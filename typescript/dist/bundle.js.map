{"version":3,"file":"bundle.js","sources":["../deps/ed25519xp/ed25519xp.js"],"sourcesContent":["import * as wasm from './ed25519xp_bg.wasm';\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n/**\n* @param {string} phrase\n* @returns {any}\n*/\nexport function gen_keypair(phrase) {\n    var ptr0 = passStringToWasm0(phrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.gen_keypair(ptr0, len0);\n    return takeObject(ret);\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* @param {Uint8Array} pair_bytes\n* @returns {any}\n*/\nexport function pubKey_from_pair_bytes(pair_bytes) {\n    var ptr0 = passArray8ToWasm0(pair_bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.pubKey_from_pair_bytes(ptr0, len0);\n    return takeObject(ret);\n}\n\n/**\n* @param {Uint8Array} message\n* @param {Uint8Array} keypair_bytes\n* @returns {any}\n*/\nexport function sign(message, keypair_bytes) {\n    var ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(keypair_bytes, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ret = wasm.sign(ptr0, len0, ptr1, len1);\n    return takeObject(ret);\n}\n\n/**\n* @param {Uint8Array} message\n* @param {Uint8Array} pubKey_bytes\n* @param {Uint8Array} sig_bytes\n* @returns {boolean}\n*/\nexport function verify(message, pubKey_bytes, sig_bytes) {\n    var ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(pubKey_bytes, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passArray8ToWasm0(sig_bytes, wasm.__wbindgen_malloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ret = wasm.verify(ptr0, len0, ptr1, len1, ptr2, len2);\n    return ret !== 0;\n}\n\n/**\n* @param {string} phrase\n* @returns {any}\n*/\nexport function seed_from_phrase(phrase) {\n    var ptr0 = passStringToWasm0(phrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.seed_from_phrase(ptr0, len0);\n    return takeObject(ret);\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nexport const __wbg_new_59cb74e423758ede = function() {\n    var ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport const __wbg_stack_558ba5917b466edd = function(arg0, arg1) {\n    var ret = getObject(arg1).stack;\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport const __wbg_error_4bb6c2a97407129a = function(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(arg0, arg1);\n    }\n};\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nexport const __wbg_buffer_1bb127df6348017b = function(arg0) {\n    var ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nexport const __wbg_newwithbyteoffsetandlength_6b93e5ed7d4086de = function(arg0, arg1, arg2) {\n    var ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport const __wbindgen_memory = function() {\n    var ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\n"],"names":["wasm.memory.buffer","wasm.__wbindgen_malloc","wasm.__wbindgen_realloc","wasm.gen_keypair","wasm.seed_from_phrase"],"mappings":"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"}